{"version":3,"sources":["logo.svg","PoemTool.js","PoemWords.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["PoemTool","props","className","id","onChange","this","defaultValue","value","type","onClick","Component","PoemWords","PoemStuff","Header","href","App","state","poemForms","myPoemForm","myPoemWords","myPoemTopic","randomPoemTopic","randomPoemWords","unHide","visibility","handleChange","bind","handleSubmit","pickRandomWords","myRequest","setState","Math","floor","random","length","console","log","Request","stateObject","fetch","then","response","json","data","catch","error","event","target","preventDefault","_","shuffle","slice","myArray","Array","i","PoemTopic","style","map","words","fontSize","word","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.872c7bd4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport './PoemTool.css';\n\nclass PoemTool extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render () {\n    return (\n      <div className=\"form-group\" id=\"myWordForm\">\n        <p> Poetry is hard. When I attempt to write, I'm often stuck wondering <i>what</i> exactly to write about.\n        So I made this little tool. Click the button, and you'll be given a list of words to draw inspiration from,\n        along with a poetic form you can use. But feel free to write what you'd like - this is only a start.     \n        ~ xoxo Erika\n        </p>\n      {/* love, nature, gratitude, humor, joy, passion, nostalgia, optimism, contentment, boredom, pessimism, frustration, random */}\n      <span> Select a Subject to Generate Words From: </span>\n      <select className=\"form-select form-select-lg\" aria-label=\"Default select example\" id=\"PoemTopic\" onChange={this.props.onChange}>\n          <option defaultValue=\"Pick For Me\">Pick For Me</option>\n          <option value=\"Love\">Love</option>\n          <option value=\"Nature\">Nature</option>\n          <option value=\"Gratitude\">Gratitude</option>\n          <option value=\"Humor\">Humor</option>\n          <option value=\"Joy\">Joy</option>\n          <option value=\"Passion\">Passion</option>\n          <option value=\"Nostalgia\">Nostalgia</option>\n          <option value=\"Optimism\">Optimism</option>\n          <option value=\"Contentment\">Contentment</option>\n          <option value=\"Boredom\">Boredom</option>\n          <option value=\"Pessimism\">Pessimism</option>\n          <option value=\"Frustration\">Frustration</option>\n        </select>\n      <button type=\"button\" className=\"btn btn-dark btn-lg\" onClick={this.props.onClick}>BE INSPIRED</button>\n    </div>\n    );\n  }\n}\n\nexport default PoemTool;\n","import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport './PoemWords.css';\n\nclass PoemWords extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render () {\n    return (\n      <div className=\"poemstuff\">\n          <p id=\"myWords\"> Write a poem using this form: </p>\n          <span> {this.props.PoemStuff} </span>\n      </div>\n    );\n  }\n}\n\nexport default PoemWords;\n","import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render () {\n    return (\n      <header>\n      <nav className=\"navbar navbar-expand-md navbar-light static-top-0 static-top-1 bg-light\" id=\"poetsToolBox\">\n          <div className=\"container justify-content-center\">\n            <a className=\"navbar-brand\" href=\"index.html\">A POET'S TOOL.</a>\n              {/* <NavLink to=\"/\">Home</NavLink> */}\n          </div>\n      </nav>\n      <nav className=\"navbar navbar-expand-md static-top-0 static-top-2 bg-dark\">\n          <div className=\"container justify-content-center\">\n              <a className=\"nav-link\" href=\"#\">NEED MORE TOOLS?</a>\n              {/* <NavLink className=\"nav-link\" to=\"/needmoretools\">NEED MORE TOOLS?</NavLink> */}\n          </div>\n      </nav>\n    </header>\n    );\n  }\n}\n\nexport default Header;\n","import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport _, { map } from 'underscore';\nimport PoemTool from './PoemTool';\nimport PoemWords from './PoemWords';\nimport Header from './Header';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //credit to https://poets.org/ for the definitions \n    this.state = {\n      poemForms: [\n        \"Aubade: a dawn song that greets the morning while lamenting the end of the night, often concerning the parting of lovers.\",\n        \"Ballad: a plot-driven song with one or more characters and often constructed in quatrain stanzas.\",\n        \"Blank Verse: poetry that does not rhyme but follows a regular meter, most commonly iambic pentameter.\",\n        \"Free Verse: poetry not dictated by an established form or meter and often influenced by the rhythms of speech.\",\n        \"Lyric Poetry: a non-narrative poem, often with songlike qualities, that expresses the speakerâ€™s personal emotions and feelings.\",\n        \"Persona Poem: a poem also known as a dramatic monologue in which the poet assumes the voice of another person, fictional character, or identity.\",\n        \"Sestina: a complex, thirty-nine-line poem featuring the intricate repetition of end-words in six stanzas and an envoi.\",\n        \"Terza Rima: a form invented in fourteenth-century Italy that is composed of tercets woven into a complex rhyme scheme. \",\n        \"Sonnet: a fourteen-line poem traditionally written in iambic pentameter, employing one of several rhyme schemes, and adhering to a tightly structured thematic organization. \"\n      ],\n\n      myPoemForm:\"\",\n\n      myPoemWords: [],\n\n      myPoemTopic:\"Pick For Me\",\n      // love, nature, gratitude, humor, joy, passion, nostalgia, optimism, contentment, boredom, pessimism, frustration, random \n\n      randomPoemTopic: [\n        \"Love\",\n        \"Nature\",\n        \"Gratitude\",\n        \"Humor\",\n        \"Joy\",\n        \"Passion\",\n        \"Nostalgia\",\n        \"Optimism\",\n        \"Contentment\",\n        \"Boredom\",\n        \"Pessimism\",\n        \"Frustration\"\n      ],\n\n      randomPoemWords: [],\n\n      unHide: {visibility: \"hidden\"}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.pickRandomWords = this.pickRandomWords.bind(this);\n  }\n\n  componentDidMount() {\n    let myRequest;\n    //love, nature, gratitude, humor, joy, passion, nostalgia, optimism, contentment, boredom, pessimism, frustration, random\n    this.setState({myPoemForm: this.state.poemForms[Math.floor(Math.random() * this.state.poemForms.length)] });\n    console.log(this.state.myPoemTopic);\n    myRequest = new Request(\"https://api.datamuse.com/words?topics=\"+(this.state.randomPoemTopic[Math.floor(Math.random() * this.state.randomPoemTopic.length)])+\"&max=1000\");\n    var stateObject = this;\n\n    fetch(myRequest)\n    .then((response) => response.json())\n    .then(function(data) {\n      stateObject.setState({myPoemWords: data});\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n  }\n\n  handleChange(event) {\n    var stateObject = this;\n    stateObject.setState({myPoemTopic: event.target.value});\n    // stateObject.setState({myPoemTopic: event.target.value}, this.handleChange);\n    // console.log(event.target.value);\n    // console.log(this.state.myPoemTopic);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    //this.setState({input: event.target.value});\n    //console.log('alert');\n    //alert('alert');\n    //thank youuuuuu: https://www.geeksforgeeks.org/how-to-select-a-random-element-from-array-in-javascript/\n    let myRequest;\n    //love, nature, gratitude, humor, joy, passion, nostalgia, optimism, contentment, boredom, pessimism, frustration, random\n    this.setState({myPoemForm: this.state.poemForms[Math.floor(Math.random() * this.state.poemForms.length)] });\n    console.log(this.state.myPoemTopic);\n\n    //I WOULD NEVER KNOW HOW TO MAKE A FETCH CALL WITHOUT THIS: https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-fetch-api-to-get-data\n    if (this.state.myPoemTopic === \"Pick For Me\") {\n      myRequest = new Request(\"https://api.datamuse.com/words?topics=\"+(this.state.randomPoemTopic[Math.floor(Math.random() * this.state.randomPoemTopic.length)])+\"&max=1000\");\n      //console.log(myRequest);\n    }\n    else {\n      myRequest = new Request(\"https://api.datamuse.com/words?topics=\"+this.state.myPoemTopic+\"&max=1000\");\n      //console.log(myRequest);\n    }\n\n    console.log(myRequest);\n    var stateObject = this;\n\n    fetch(myRequest)\n    .then((response) => response.json())\n    .then(function(data) {\n      stateObject.setState({myPoemWords: data});\n      stateObject.setState({randomPoemWords: _.shuffle(data).slice(0,10)});\n      stateObject.setState({unHide: {visibility: \"visible\"}});\n      //console.log(data);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n\n    //console.log(this.state.randomPoemWords);\n    //console.log(this.state.myPoemWords); \n  }\n\n  pickRandomWords(myArray) {\n    var random = new Array(10);\n    for (let i=0; i < 11; i++) {\n      random[i] = myArray[Math.floor(Math.random() * myArray.length)];\n    }\n    return random;\n  }\n  render () {\n    return (\n      <div> \n              <Header />\n              <div className=\"container\">\n                <div className=\"row\"> \n                  <PoemTool onClick={this.handleSubmit} onChange={this.handleChange} PoemTopic={this.state.myPoemTopic}/>\n                  {/* <PoemTopic /> */}\n                </div>\n                <div style={this.state.unHide} className=\"row\"> \n                  <div className=\"col-md-6\">\n                    <PoemWords PoemStuff={this.state.myPoemForm}/>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <p id=\"myWords\"> Drawing inspiration from these words: </p>\n                    {\n                      this.state.randomPoemWords.map((words) => \n                        <p style={{fontSize: \"1.4rem\"}} key={words.word}>{words.word} </p>\n                      )\n                    }\n                  </div>\n                  </div>\n              </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}